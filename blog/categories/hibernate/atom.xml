<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hibernate | Oukq的博客]]></title>
  <link href="http://fishball-ou.github.io/blog/categories/hibernate/atom.xml" rel="self"/>
  <link href="http://fishball-ou.github.io/"/>
  <updated>2014-12-15T21:57:40+08:00</updated>
  <id>http://fishball-ou.github.io/</id>
  <author>
    <name><![CDATA[oukangquan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[解决Hibernate的延迟加载]]></title>
    <link href="http://fishball-ou.github.io/blog/2014/08/05/solve-hibernate-lazy-initializing/"/>
    <updated>2014-08-05T09:23:09+08:00</updated>
    <id>http://fishball-ou.github.io/blog/2014/08/05/solve-hibernate-lazy-initializing</id>
    <content type="html"><![CDATA[<p><p>为了解决不必要的查询，Hibernate的联接查询在默认情况下采用延迟加载，也就是懒加载，在需要数据的情况下再查询。如果在controller层，使用将数据转换成JSON字符串时，session就已经关闭了，再查询时会报错，session closed。<p>
查了几遍资料
有几种思路：</p>

<p>使用过滤器openSessionInViewFilter
<code>
&lt;filter&gt;
    &lt;filter-name&gt;openSessionInViewFilter&lt;/filter-name&gt;
    &lt;filter-class&gt;
        org.springframework.orm.hibernate3.support.OpenSessionInViewFilter
    &lt;/filter-class&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;singleSession&lt;/param-name&gt;
        &lt;param-value&gt;true&lt;/param-value&gt;
    &lt;/init-param&gt;
    &lt;init-param&gt;
        &lt;param-name&gt;sessionFactoryBean&lt;/param-name&gt;
        &lt;param-value&gt;sessionFactory&lt;/param-value&gt;
    &lt;/init-param&gt;
&lt;/filter&gt;
&lt;filter-mapping&gt;
    &lt;filter-name&gt;openSessionInViewFilter&lt;/filter-name&gt;
    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
&lt;/filter-mapping&gt;
</code></p>

<p>不过……也有说在springmvc时不太好用，在openSessionInViewFilter openSession时Flush mode是never，需要设置为auto，所以可以继承这个fliter重写filter的openSession和closeSession方法</p>

<pre><code>    &lt;filter&gt;
        &lt;filter-name&gt;solveLazyInitFilter&lt;/filter-name&gt;
        &lt;filter-class&gt;
            oukq.servlet.filter.SolveLazyInitFilter
        &lt;/filter-class&gt;
    &lt;/filter&gt;
      &lt;filter-mapping&gt;
    &lt;filter-name&gt;solveLazyInitFilter&lt;/filter-name&gt;
        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/filter-mapping&gt;
</code></pre>

<pre><code>public class SolveLazyInitFilter extends OpenSessionInViewFilter{
    public SolveLazyInitFilter() {
        super();
    }
    public void destroy() {
    }
    @Override
    protected Session getSession(SessionFactory sessionFactory) throws DataAccessResourceFailureException{
        Session session = SessionFactoryUtils.getSession(sessionFactory, true);
        setFlushMode(FlushMode.AUTO);
        FlushMode flushMode = getFlushMode();
        if(flushMode == null){
            session.setFlushMode(flushMode);
        }
        return session;
    }
    @Override
    protected void closeSession(Session session,SessionFactory sessionFactory){
        session.flush();
        SessionFactoryUtils.closeSession(session);
    }
}
</code></pre>

<p>第二种属于因地制宜了，采用Jackson可以使用@JsonInorg，不过那些懒加载的东西就是null了</p>

<p>clone的方法，返回对象时clone出来一个新的对象，实现cloneable也可以，直接深度克隆也是大大的可以的。</p>

<p>反正controller层只处理传参，所有处理都在service层，受spring的事务管理(声明式事务)，在service层就JSON.toJsonString了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[org.springframework.dao.support.DaoSupport cannot be resolved]]></title>
    <link href="http://fishball-ou.github.io/blog/2014/08/04/org-dot-springframework-dot-dao-dot-support-dot-daosupport-cannot-be-resolved/"/>
    <updated>2014-08-04T11:49:54+08:00</updated>
    <id>http://fishball-ou.github.io/blog/2014/08/04/org-dot-springframework-dot-dao-dot-support-dot-daosupport-cannot-be-resolved</id>
    <content type="html"><![CDATA[<p>在继承HibernateDaoSupport时报org.springframework.dao.support.DaoSupport cannot be resolved错。
原因是整合时候没导入spring-tx.RELEASE.jar包，导入即可。</p>
]]></content>
  </entry>
  
</feed>
