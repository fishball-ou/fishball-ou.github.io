<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Oukq的博客]]></title>
  <link href="http://fishball-ou.github.io/atom.xml" rel="self"/>
  <link href="http://fishball-ou.github.io/"/>
  <updated>2014-12-15T22:00:08+08:00</updated>
  <id>http://fishball-ou.github.io/</id>
  <author>
    <name><![CDATA[oukangquan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Time Fly]]></title>
    <link href="http://fishball-ou.github.io/blog/2014/12/15/time-fly/"/>
    <updated>2014-12-15T00:00:00+08:00</updated>
    <id>http://fishball-ou.github.io/blog/2014/12/15/time-fly</id>
    <content type="html"><![CDATA[<p>
    时间都去哪了，还没好好感受年轻，就已经过去了。
    好久没写了，时间真的去哪了？
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[a lititle complain]]></title>
    <link href="http://fishball-ou.github.io/blog/2014/08/07/a-lititle-complain/"/>
    <updated>2014-08-07T13:22:36+08:00</updated>
    <id>http://fishball-ou.github.io/blog/2014/08/07/a-lititle-complain</id>
    <content type="html"><![CDATA[<p>今天连上chinanet的网，下了个电视剧，然后一看，上传1.5m/s,一看，果然是迅雷啊，没办法，迅雷就是这样的，pop，关了。以为没事了，再看又1.5,当时就想，难道迅雷这么叼，后台还在运行，一看，是什么搜狗的一键安装器，我去你妹的搜狗，我啥时候要求下这东西了，你上传些什么东西啊，我去！搜狗真是屌啊，声都不说一声就上传了，立刻就把搜狗的所有东西都删掉了<b>由</b>你个搜狗！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[今天一些困扰的问题]]></title>
    <link href="http://fishball-ou.github.io/blog/2014/08/06/attentions/"/>
    <updated>2014-08-06T21:35:37+08:00</updated>
    <id>http://fishball-ou.github.io/blog/2014/08/06/attentions</id>
    <content type="html"><![CDATA[<p>今天特傻的把资源文件放web-inf里了，傻傻的测能不能进action里啊，结果就是action的对应名称写错了，应该放webContent的放web-inf里面，以后引以为戒那！！
</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[有关SpringMVC的问题]]></title>
    <link href="http://fishball-ou.github.io/blog/2014/08/06/about-springmvc/"/>
    <updated>2014-08-06T14:02:43+08:00</updated>
    <id>http://fishball-ou.github.io/blog/2014/08/06/about-springmvc</id>
    <content type="html"><![CDATA[<p>今天在普通servlet工程那里使用@Controller的声明式注入，结果到连接到servlet时老报could not bound the servlet。就老是怀疑@Resource怎么老注入不进去呢，我最后的理解是servlet有tomcat自己创建，而不是spring创建。不是有spring的dispathcer分发至，所以有这个问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决Hibernate的延迟加载]]></title>
    <link href="http://fishball-ou.github.io/blog/2014/08/05/solve-hibernate-lazy-initializing/"/>
    <updated>2014-08-05T09:23:09+08:00</updated>
    <id>http://fishball-ou.github.io/blog/2014/08/05/solve-hibernate-lazy-initializing</id>
    <content type="html"><![CDATA[<p><p>为了解决不必要的查询，Hibernate的联接查询在默认情况下采用延迟加载，也就是懒加载，在需要数据的情况下再查询。如果在controller层，使用将数据转换成JSON字符串时，session就已经关闭了，再查询时会报错，session closed。<p>
查了几遍资料
有几种思路：</p>

<p>使用过滤器openSessionInViewFilter
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;filter&gt;
</span><span class='line'>  &lt;filter-name&gt;openSessionInViewFilter&lt;/filter-name&gt;
</span><span class='line'>  &lt;filter-class&gt;
</span><span class='line'>      org.springframework.orm.hibernate3.support.OpenSessionInViewFilter
</span><span class='line'>  &lt;/filter-class&gt;
</span><span class='line'>  &lt;init-param&gt;
</span><span class='line'>      &lt;param-name&gt;singleSession&lt;/param-name&gt;
</span><span class='line'>      &lt;param-value&gt;true&lt;/param-value&gt;
</span><span class='line'>  &lt;/init-param&gt;
</span><span class='line'>  &lt;init-param&gt;
</span><span class='line'>      &lt;param-name&gt;sessionFactoryBean&lt;/param-name&gt;
</span><span class='line'>      &lt;param-value&gt;sessionFactory&lt;/param-value&gt;
</span><span class='line'>  &lt;/init-param&gt;
</span><span class='line'>&lt;/filter&gt;
</span><span class='line'>&lt;filter-mapping&gt;
</span><span class='line'>  &lt;filter-name&gt;openSessionInViewFilter&lt;/filter-name&gt;
</span><span class='line'>  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
</span><span class='line'>&lt;/filter-mapping&gt;</span></code></pre></td></tr></table></div></figure></p>

<p>不过……也有说在springmvc时不太好用，在openSessionInViewFilter openSession时Flush mode是never，需要设置为auto，所以可以继承这个fliter重写filter的openSession和closeSession方法</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;filter&gt;
</span><span class='line'>  &lt;filter-name&gt;solveLazyInitFilter&lt;/filter-name&gt;
</span><span class='line'>  &lt;filter-class&gt;
</span><span class='line'>      oukq.servlet.filter.SolveLazyInitFilter
</span><span class='line'>  &lt;/filter-class&gt;
</span><span class='line'>&lt;/filter&gt;
</span><span class='line'>  &lt;filter-mapping&gt;
</span><span class='line'>&lt;filter-name&gt;solveLazyInitFilter&lt;/filter-name&gt;
</span><span class='line'>  &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
</span><span class='line'>&lt;/filter-mapping&gt;</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class SolveLazyInitFilter extends OpenSessionInViewFilter{
</span><span class='line'>    public SolveLazyInitFilter() {
</span><span class='line'>        super();
</span><span class='line'>    }
</span><span class='line'>  public void destroy() {
</span><span class='line'>  }
</span><span class='line'>  @Override
</span><span class='line'>  protected Session getSession(SessionFactory sessionFactory) throws DataAccessResourceFailureException{
</span><span class='line'>      Session session = SessionFactoryUtils.getSession(sessionFactory, true);
</span><span class='line'>      setFlushMode(FlushMode.AUTO);
</span><span class='line'>      FlushMode flushMode = getFlushMode();
</span><span class='line'>      if(flushMode == null){
</span><span class='line'>          session.setFlushMode(flushMode);
</span><span class='line'>      }
</span><span class='line'>      return session;
</span><span class='line'>  }
</span><span class='line'>  @Override
</span><span class='line'>  protected void closeSession(Session session,SessionFactory sessionFactory){
</span><span class='line'>      session.flush();
</span><span class='line'>      SessionFactoryUtils.closeSession(session);
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<p>第二种属于因地制宜了，采用Jackson可以使用@JsonInorg，不过那些懒加载的东西就是null了</p>

<p>clone的方法，返回对象时clone出来一个新的对象，实现cloneable也可以，直接深度克隆也是大大的可以的。</p>

<p>反正controller层只处理传参，所有处理都在service层，受spring的事务管理(声明式事务)，在service层就JSON.toJsonString了</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[org.springframework.dao.support.DaoSupport cannot be resolved]]></title>
    <link href="http://fishball-ou.github.io/blog/2014/08/04/org-dot-springframework-dot-dao-dot-support-dot-daosupport-cannot-be-resolved/"/>
    <updated>2014-08-04T11:49:54+08:00</updated>
    <id>http://fishball-ou.github.io/blog/2014/08/04/org-dot-springframework-dot-dao-dot-support-dot-daosupport-cannot-be-resolved</id>
    <content type="html"><![CDATA[<p>在继承HibernateDaoSupport时报org.springframework.dao.support.DaoSupport cannot be resolved错。
原因是整合时候没导入spring-tx.RELEASE.jar包，导入即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一篇blog]]></title>
    <link href="http://fishball-ou.github.io/blog/2014/08/02/the-first-post/"/>
    <updated>2014-08-02T11:22:03+08:00</updated>
    <id>http://fishball-ou.github.io/blog/2014/08/02/the-first-post</id>
    <content type="html"><![CDATA[<h1>hello!</h1>

<ul>
<li>这是我的第一篇博客，testing，tesing！
<br></li>
</ul>


<pre><code>
class Test{
        public static void main(String[] args){
        System.out.println("Hello World!");
    }
}
</code></pre>

]]></content>
  </entry>
  
</feed>
